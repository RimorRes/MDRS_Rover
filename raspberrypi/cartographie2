
import numpy as np
import pandas as pd
import csv


#Reference :
# 0/0/0 ... ; 0/0/0 ... 

def ecrire(liste): #WAI
  #fonction qui inscrit graphe dans graphe.csv
  #Convertit la liste en une classe de Panda pour après écrire dans le fichier csv
  fichier = pd.DataFrame(liste , index = [i for i in range (len(liste))] , columns = [y for y in range (len(liste[0]))] )
  fichier.to_csv("graphe.csv")


def transforme_en_liste(tableau):
  #tableau : matrice/int 
  #tableau2 : list/int , version "liste" de tableau

  tableau2 = []
  for i in range (len(tableau)):
    for y in range (len(tableau[i])):
      tableau2.append(tableau[i][y])
  return tableau2

def recuperer(type_): #WAI
  #type_ : str , le nom du fichier csv qu'on veut import.
  #       graphe.csv       : version ordonée et rangée de cartographie 
  #       cartographie.csv : version 'en vrac' de graphe. Celui crée 
  #                          pendant le trajet/expédition.
  #liste : list, les données rangés dans une liste (celui de graphe ou carto)
  #Fonction qui recupere les données sous forme d'une liste (pas tableau)
  #retourne le fichier sous format d'une liste (pas un "tableau")
  fichier = open(type_,'r')
  liste = []
  for ligne in fichier:
    liste.append(ligne.rstrip().rsplit(','))
  liste.pop(0)
  if type_=="cartographie.csv" :
    for i in range (len(liste)) :
      liste[i] = [str(liste[i][0]) ,int(liste[i][1]) , int(liste[i][2]) , int(liste[i][3]) , int(liste[i][4]) ] #Je ne sais pas comment on pourrait "ranger" un fichier csv qui ne contient pas de coordonnées x/y, pourrais je svp avoir une explication ? Merci d'avance.

  if type_ == "graphe.csv" :
    for i in range (len(liste)):
      liste[i].pop(0)
      for element in range (len(liste[i])) : 
        liste[i][element] = liste[i][element].rsplit('/')
        for element2 in range(len(liste[i][element])):
          liste[i][element][element2] = int(liste[i][element][element2]) 
  liste = transforme_en_liste(liste)
  fichier.close()
  return liste

def chercher_limite(l) :
  #permet de trouver les coords des cases avec le plus petit x, plus petit y et inversement. On suppose que 2 premières données d'un élément de graphe/cartographie représente ses coordonnées => à changer si cela change
  #limites : liste/int, résultat de ^^^
  limites = []
  miniX = l[0][0]
  miniY = l[0][1]
  maxX = l[0][0]
  maxY = l[0][1]

  for i in range (1,len(l)) :
    if len(l[i]) != 1: #cette condition assure qu'on ne compare pas les cases "vide" (représenté par des -1 dans graphe) 
     if l[i][0] < miniX : 
       miniX = l[i][0]
     if l[i][0] > maxX: 
       maxX = l[i][0]
     if l[i][1] < miniY : 
       miniY = l[i][1]
     if l[i][1] > maxY :
       maxY = l[i][1]
  
  limites = [miniX , maxX , miniY , maxY ]
  return limites 

def list_vers_str (e) :
  #convertit une liste en string
  #e : list/int argument , represente un element de graphe sous une liste 
  #convert : sting , e convertit en str 
  convert = ""
  if e!= -1 :
    for i in range (len(e)) :
      convert = convert + str(e[i])
      if i!=len(e)-1:
        convert = convert + "/"
  return convert


def quadrillage(type_): #WAI
  #liste : list/int, cartographie.csv sous une list
  #liste2: list/int, si liste == graphe.csv, alors liste2 = cartographie.csv
  #Fonction qui crée le graphe.csv, si il est déjà crée alors il va fusionner graphe et cartographie pour refaire un nouveau fichier graphe.
  #type_ : char , choisir graphe ou cartographie. 
  #limites : list/int , X/Y de la case la plus proche de 0x/Oy et celle la plus loin de celle-ci.

  if type_ == 'cartographie.csv' :  #graphe.csv n'est pas crée #WAI
    liste = recuperer(type_)
    limites = chercher_limite(liste)
    graphe = []

    for y in range (limites[3] - limites[2]+1):
      graphe.append([])
      for x in range (limites[1] - limites[0]+1):
        graphe[y].append(-1)
    for element in liste :
        graphe[element[1] - limites[2]][element[0] - limites[0]] = list_vers_str(element)

  else : #graphe est déjà crée alors on fusionne graphe et cartographie #WAI
    liste = recuperer(type_) #Les graphes sont déjà triés
    limites = chercher_limite(liste)
    liste2 = recuperer('cartographie.csv')
    limites2 = chercher_limite(liste2)
    graphe=[]
    if limites2[0] < limites[0]:
      limites[0] = limites2[0]
    if limites2[2] < limites[2] :
      limites[2] = limites2[2]
    if limites2[1] > limites[1] :
      limites[1] = limites2[1]
    if limites2[3] > limites[3] :
      limites[3] = limites2[3] #C'est long 
    op1 =limites[1] - limites[0] + 1
    op2 =limites[3] - limites[2] + 1

    for y in range(op2):
      graphe.append([])
      for x in range(op1):
        graphe[y].append(-1)
    for element in liste:
      #quadrillage("graphe.csv")
      if len(element)!=1:
        graphe[element[1] - limites[2]][element[0] - limites[0]] = list_vers_str(element)
    for element in liste2:
        graphe[element[1] - limites[2]][element[0] - limites[0]] = list_vers_str(element)
  ecrire(graphe)

